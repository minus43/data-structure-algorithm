<FDSC>
FDSC는 Fundamentals of Data Structures in C의 줄임, 너무 길어서..
1. 기본 개념 
  1.1. 개요: 시스템 생명 주기
    대형 컴퓨터 프로그램들을 바라보는 프로그래머
      -> 매우 복잡하게 상호 작용하는 부품으로 구성된 시스템과 비슷하다.
        ->시스템과 비슷하게 이런 프로그램들은 '시스템 생명 주기' 라는 개발 단계를 거친다.
    시스템 생명 주기(System life cycle)
      1. 요구사항(requirement)
        프로그램의 목적과 입력과 결과를 기술한다.
      2. 분석(analysis)
        문제들을 실제로 다룰 수 있는 범위로 나눈다.
        상향식(bottom-up) 접근과 하향식(top-down) 접근
          상향식 접근
            말 그대로 가장 완성된 단계에서 접근하려는 것, 코딩에 중점을 둠
            목적과 일치하지 않는 경우가 생길 수 있다.
          하향식 접근
            최종 결과가 될 프로그램을 다룰 수 있는 부분으로 쪼개어 설계하고 구현
      3. 설계(design)
        프로그램이 필요로 하는 자료 객체들과 연산들을 결정한다. 
        이때 실제 구현에 필요한 세부적인 사항은 무시한다.(효과적인 구현을 위해서 다양한 언어들에 대해서 고려할 수 있어야 한다.)
      4. 정제(refinement)와 코딩(coding)
        설계 단계에서 결정한 자료 객체의 표현을 결정하고 연산들을 구현한다.
        자료 객체의 표현 방법이 연산의 효율성을 결정할 수 있다.
      5. 검증(verification)
        정확성 증명(correctness proof)
          수학적 기법으로 증명이 가능할 수 있다. 
          그러나, 시간적이나 질적으로 손해일 수 있다.
          이미 증명된 알고리즘을 이용하는 것도 방법이다.
        테스트(testing)
          코딩 단계나 그 이전에서 테스트를 프로그램의 증명을 해낼 수 있다.
          그러나, 테스트는 테스트 데이터와 수행 가능한 코드를 필요로 한다.
          테스트 데이터는 모든 프로그램 단위들이 정확히 수행되는지를 검증할 수 있어야 한다.
          실행 시간도 중요하다.
        오류 제거(error removal)
          정확성 증명과 테스트에서 발생한 오류가 발생한 코드를 수정
          수정에 용이하고 오류에 잘 대처할 수 있도록 코드에 대한 설명을 적어놓는 것이 좋다.

  1.2 포인터와 동적 할당
